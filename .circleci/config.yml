version: 2.1

commands:
  restore_module_cache:
    parameters:
      module_path:
        type: string
    steps:
      - restore_cache:
          keys:
            - v{{ .Environment.CIRCLECI_CACHE_VERSION }}-dependencies-<< parameters.module_path >>-{{ checksum "<< parameters.module_path >>/yarn.lock" }}
  save_module_cache:
    parameters:
      module_path:
        type: string
    steps:
      - save_cache:
          key: v{{ .Environment.CIRCLECI_CACHE_VERSION }}-dependencies-<< parameters.module_path >>-{{ checksum "<< parameters.module_path >>/yarn.lock" }}
          paths:
            - << parameters.module_path >>/node_modules
  restore_story_cache:
    parameters:
      module_path:
        type: string
    steps:
      - restore_cache:
          keys:
            - v{{ .Environment.CIRCLECI_CACHE_VERSION }}-dependencies-<< parameters.module_path >>-{{ checksum "<< parameters.module_path >>/.cache-loader" }}
  save_story_cache:
    parameters:
      module_path:
        type: string
    steps:
      - save_cache:
          key: v{{ .Environment.CIRCLECI_CACHE_VERSION }}-dependencies-<< parameters.module_path >>-{{ checksum "<< parameters.module_path >>/.cache-loader" }}
          paths:
            - << parameters.module_path >>/.cache-loader
  install_fonts:
    steps:
      - run:
          name: Prepare Japanese fonts
          command: |
            mkdir /tmp/fonts
            cd /tmp/fonts
            wget https://noto-website-2.storage.googleapis.com/pkgs/NotoSansCJKjp-hinted.zip
            unzip NotoSansCJKjp-hinted.zip
            mkdir -p ~/.fonts
            cp *otf ~/.fonts
            fc-cache -f -v
            fc-match --all
  type_check:
    steps:
      - run:
          name: "Typecheck"
          command: yarn type-check
  lint:
    steps:
      - run:
          name: "Lint Check"
          command: yarn lint
  build_storybook:
    steps:
      - run:
          name: "Build Storybook"
          command: yarn storybook:build
  visreg_test:
    steps:
      - run:
          name: "Run Visual-Regression test"
          command: |
            yarn storycap:all
            yarn reg-suit

  setup_and_test:
    steps:
      - checkout
      - install_fonts
      - run: yarn
      - build_storybook
      - store_artifacts:
          path: storybook-static
      - run:
          name: "Report storybook URL to Pull Request"
          command: npx moxci storybook-static/index.html
      - visreg_test
jobs:
  test:
    docker:
      - image: circleci/node:dubnium-browsers
    working_directory: ~/app
    steps:
      - setup_and_test

workflows:
  version: 2.1
  test_workflow:
    jobs:
      - test
